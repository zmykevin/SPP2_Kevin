__author__ = 'kevin'
#In this code we will implement the adaptive gaussian model for background subtraction on gray scales only
import cv2
import numpy as np
from copy import deepcopy
import math


#Define a function to evaluate whether the pixel matches with one of the gaussian component
def matching_gaussian(X,mixture_gaussian_model):
    matching_scale = 2.5
    num_gaussian = len(mixture_gaussian)
    matching_models = []
    for i in range(0,num_gaussian):
        current_gaussian = mixture_gaussian_model[i]
        current_mean = current_gaussian[:,:,0]
        current_SD = current_gaussian[:,:,1]+10**(-8)
        difference = np.abs(X-current_mean)-matching_scale*current_SD

        #This process assure the first matching models will be kept
        if i == 0:
            matching_models_matrix = np.where(difference <= 0,1,0)
        else:
            matching_models_matrix = np.where(difference <= 0,1,0)
            matching_models_history = sum(matching_models)
            repetition_check = matching_models_matrix-matching_models_history
            matching_models_matrix = np.where(repetition_check == 1,1,0)
        matching_models.append(matching_models_matrix)
    return matching_models


#Define function to compute probability
def mixture_gaussian_probability(X,mixture_gaussian_model):
    #initialize mixture gaussian probability
    MGP = np.zeros((X.shape[0],X.shape[1]))
    num_gaussian = len(mixture_gaussian_model)
    for i in range (0,num_gaussian):
        current_gaussian = mixture_gaussian_model[i]
        current_mean = current_gaussian[:,:,0]
        current_SD = current_gaussian[:,:,1]+10**(-8)
        current_weight = current_gaussian[:,:,2]
        inside_exponential = -0.5 *np.divide(np.square(X-current_mean),np.square(current_SD))#should return a matrix same as frame size
        GPD = np.divide(np.exp(inside_exponential),math.sqrt(2*math.pi)*current_SD)
        GPD = np.where(GPD > 1,0,GPD)
        MGP += np.multiply(current_weight,GPD)
    return MGP

#Define the function to update the mixture gaussian
def update_mixture_gaussian(X,matching_models,mixture_gaussian_model,alpha):
    #Define the low_weight
    low_weight = 0

    #This evaluates whether it is matching or non-matching gaussian matching
    K_Gaussian_matching = sum(matching_models)

    #define the total number of gaussian models in the mixture
    num_gaussian = len(mixture_gaussian_model)

    #Deal with the non_matching K Gaussion
    Non_Matching_GPD_Mixture = np.zeros([X.shape[0],X.shape[1],num_gaussian])
    for i in range(0,num_gaussian):
        current_gaussian = mixture_gaussian_model[i]
        current_mean = current_gaussian[:,:,0]
        current_SD = current_gaussian[:,:,1]+10**(-8)

        #compute the probability
        inside_exponential = -0.5 *np.divide(np.square(X-current_mean),np.square(current_SD))#should return a matrix same as frame size
        GPD = np.multiply(np.true_divide((1/math.sqrt(2*math.pi)),current_SD),np.exp(inside_exponential))
        Non_Matching_GPD_Mixture[:,:,i] = np.multiply(1-K_Gaussian_matching,GPD)

    #Min_Potential_Distribution = np.argmin(Non_Matching_GPD_Mixture,2) + (1-K_Gaussian_matching)
    Min_Potential_Distribution = np.argmin(Non_Matching_GPD_Mixture,2)
    old_mixture_gaussian_model = deepcopy(mixture_gaussian_model)
    for i in range(0,num_gaussian):
        Min_i = np.where(Min_Potential_Distribution == i+1,1,0)
        #Extract the current gaussian model
        current_gaussian = old_mixture_gaussian_model[i]
        current_mean = current_gaussian[:,:,0]
        current_SD = current_gaussian[:,:,1]+10**(-8)
        current_weight = current_gaussian[:,:,2]

        #Update mean as the current X
        mixture_gaussian_model[i][:,:,0] = np.multiply(current_mean,(1-Min_i)) + np.multiply(X,Min_i)
        #update SD to be high
        #mixture_gaussian_model[i][:,:,1] = np.multiply(current_SD,(1-Min_i))+np.multiply(np.abs(255-mixture_gaussian_model[i][:,:,0]),Min_i)
        mixture_gaussian_model[i][:,:,1] = np.multiply(current_SD,(1-Min_i))+np.multiply(255,Min_i)
        #update weight to be low, set it to 0.01
        mixture_gaussian_model[i][:,:,2] = np.multiply(current_weight,(1-Min_i)) + Min_i*low_weight
        #weight_distribution = (np.multiply(current_weight,Min_i)-Min_i*low_weight)/(num_gaussian-1)
        weight_distribution = (np.multiply(current_weight,Min_i)-Min_i*low_weight)/(num_gaussian-1)
        for j in range(0,num_gaussian):
            if j != i:
                mixture_gaussian_model[j][:,:,2] += weight_distribution

    #Deal with the matching K Gaussion
    old_mixture_gaussian_model = deepcopy(mixture_gaussian_model)
    for i in range(0,num_gaussian):
        current_gaussian = old_mixture_gaussian_model[i]
        current_mean = current_gaussian[:,:,0]
        current_SD = current_gaussian[:,:,1]+10**(-8)
        current_weight = current_gaussian[:,:,2]

        matching_gaussian_i = matching_models[i]

        #Define the gaussian distribution probability
        inside_exponential = -0.5 *np.divide(np.square(X-current_mean),np.square(current_SD))#should return a matrix same as frame size
        GPD = np.multiply(np.true_divide((1/math.sqrt(2*math.pi)),current_SD),np.exp(inside_exponential))
        GPD = np.where(GPD > 1,0,GPD)
        p = alpha*GPD

        #update_weight for matching k_models
        matching_k_models_weight = np.multiply(K_Gaussian_matching,current_weight)
        mixture_gaussian_model[i][:,:,2] = np.multiply(1-K_Gaussian_matching,current_weight)+(1-alpha)*matching_k_models_weight+alpha*matching_gaussian_i

        #update mean for matching k_models
        mixture_gaussian_model[i][:,:,0] = np.multiply(1-matching_gaussian_i,current_mean) + np.multiply(1-p,np.multiply(matching_gaussian_i,current_mean)) + np.multiply(p,np.multiply(matching_gaussian_i,X))

        #update SD
        updated_variance_matching_model = np.multiply((1-p),np.multiply(matching_gaussian_i,np.square(current_SD))) + np.multiply(p,np.multiply(matching_gaussian_i,np.square(X-mixture_gaussian_model[i][:,:,0])))
        mixture_gaussian_model[i][:,:,1] = np.multiply(1-matching_gaussian_i,current_SD) + np.sqrt(updated_variance_matching_model)

def background_process_heuristic(mixture_gaussian_model,T):
    #Return a matrix that includes the number of gaussians that matches the background procee
    #Return a updated order mixture_gaussian_model
    #Define the number of gaussia models
    num_gaussian = len(mixture_gaussian_model)


    for i in range(0,num_gaussian):
        if i == 0:
            W_by_SD = np.divide(mixture_gaussian_model[i][:,:,2],mixture_gaussian_model[i][:,:,1]+10**(-8))
        else:
            current_W_by_SD = np.divide(mixture_gaussian_model[i][:,:,2],mixture_gaussian_model[i][:,:,1]+10**(-8))
            W_by_SD = np.dstack((W_by_SD,current_W_by_SD))

    updated_index = np.argsort(W_by_SD,axis = 2)

    current_mixture_gaussian_model = deepcopy(mixture_gaussian_model)
    for i in range(0,num_gaussian):
        i_th_gaussian_index = updated_index[:,:,i]
        present_model = current_mixture_gaussian_model[i]
        updated_gaussian_model = np.zeros((present_model.shape[0],present_model.shape[1],3))
        for j in range(0,num_gaussian):
            mathing_model_j = np.where(i_th_gaussian_index == j,1,0)
            for k in range(0,3):
                updated_gaussian_model[:,:,k] = np.multiply(1-mathing_model_j,updated_gaussian_model[:,:,k])+np.multiply(mathing_model_j,current_mixture_gaussian_model[j][:,:,k])
        mixture_gaussian_model[4-i] = updated_gaussian_model
    #mixture_gaussian_model = list(reversed(mixture_gaussian_model))
    #The next step is to figure out how many num of gaussians for each background process
    matching_history = []
    background_process_history = []
    for i in range(0,num_gaussian):
        if i == 0:
            accumulate_weight = deepcopy(mixture_gaussian_model[i][:,:,2])
        else:
            accumulate_weight += mixture_gaussian_model[i][:,:,2]
        matching_condition_accumulate = np.where(accumulate_weight > T,1,0)
        matching_condition_current = np.where(matching_condition_accumulate-sum(matching_history)>0,1,0)
        matching_history.append(matching_condition_current)
        background_process_history.append((i+1)*matching_condition_current)
    background_process = sum(background_process_history)
    return background_process

if __name__ == '__main__':
    print ('Background Subtraction Start')
    #Define the number of gaussina models in the mixed model
    K = 5
    #Define the learning reate
    alpha = 0.05
    #Define initial weight parameter
    i_weight = 0.2

    #Start to capture the video
    cap = cv2.VideoCapture('highwayI_raw.AVI')

    #Get the size dimension of the frame
    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))



    #Initialize the gaussian mixture
    mixture_gaussian = []
    for i in range(0,K):
        ret,frame = cap.read()
        gaussian_i = np.zeros((frame_height,frame_width,3))#0 = Mean, 1 = Standard Deviation, and 2 = Prior Weight
        #initilize the mean values
        gaussian_i[:,:,0] = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)
        #initialize the standard deviation
        for j in range(0,3):
            ret,frame = cap.read()
            gaussian_i[:,:,1] = gaussian_i[:,:,1]+np.abs(cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY) - gaussian_i[:,:,0])
        #Get the average value for the standard deviation
        gaussian_i[:,:,1] = gaussian_i[:,:,1]/3
        #Initialize the weights
        gaussian_i[:,:,2] = i_weight*np.ones([frame_height,frame_width])

        #Append the ith gaussian model to the mixture
        mixture_gaussian.append(gaussian_i)

    #Initialize the probability history
    probability_history = []
    #Initialize the background gaussian process
    background_gaussian_process = background_process_heuristic(mixture_gaussian,0.8)
    #Define the video writer
    #define the codec and create Video Writer oject
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter('background_subtraction.avi',fourcc,2.0,(frame_width,frame_height))
    while(cap.isOpened()):
        ret,frame = cap.read()
        if ret == True:
            gray_frame = cv2.cvtColor(frame,cv2.COLOR_BGR2GRAY)


            #compute probability and store it in the current probability
            current_probability = mixture_gaussian_probability(gray_frame,mixture_gaussian)
            probability_history.append(current_probability)

            #evaluate the matching models
            matching_models = matching_gaussian(gray_frame,mixture_gaussian)
            #Compute matching_model_matrix
            matching_model_matrix = np.zeros((gray_frame.shape[0],gray_frame.shape[1]))
            for i in range(0,len(matching_models)):
                matching_model_matrix += (i+1)*matching_models[i]
            matching_model_matrix = np.where(matching_model_matrix == 0, 10,matching_model_matrix)

            #Determine which are background and which are foreground
            subtraction_mask = np.where(matching_model_matrix > background_gaussian_process,255,0)
            subtraction_mask = subtraction_mask.astype(dtype = 'uint8')

            #update the gaussian parameters
            update_mixture_gaussian(gray_frame,matching_models,mixture_gaussian,alpha)

            #background heuristic
            background_gaussian_process = background_process_heuristic(mixture_gaussian,0.8)

            image = np.hstack((gray_frame,subtraction_mask))
            #Write out the image
            out.write(image)
            cv2.imshow('frame',image)
            if cv2.waitKey(1) == 27:
                break
        else:
            break

    cap.release()
    out.release()
    cv2.destroyAllWindows()
