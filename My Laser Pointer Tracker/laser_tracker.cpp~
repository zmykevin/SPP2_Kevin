#include <flycapture/FlyCapture2.h>
#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
//#include <opencv2/imgcodecs.hpp>
//#include <opencv2/highgui/highgui.hpp>
#include <opencv/cv.h>
#include <iostream>
#include <stdio.h>
#include <ctime>

using namespace FlyCapture2;
using namespace std;

const int radius = 5;

int main()
{
cout << "My laser pointer tracker" << endl;
Error error;
Camera camera;
CameraInfo camInfo;
double minVal;
double maxVal;
cv::Point minLoc;
minLoc.x = 1;
minLoc.y = 1;
cv::Point maxLoc;
maxLoc.x = 1;
maxLoc.y = 1;


    // Connect the camera
    error = camera.Connect( 0 );
    if ( error != PGRERROR_OK )
    {
        cout << "Failed to connect to camera" << endl;     
        return false;
    }
    
    // Get the camera info and print it out
    error = camera.GetCameraInfo( &camInfo );
    if ( error != PGRERROR_OK )
    {
        cout << "Failed to get camera info from camera" << endl;     
        return false;
    }
    cout << camInfo.vendorName << " "
    		  << camInfo.modelName << " " 
    		  << camInfo.serialNumber << endl;
	
	error = camera.StartCapture();
    if ( error == PGRERROR_ISOCH_BANDWIDTH_EXCEEDED )
    {
        cout << "Bandwidth exceeded" << endl;     
        return false;
    }
    else if ( error != PGRERROR_OK )
    {
        cout << "Failed to start image capture" << endl;     
        return false;
    } 
	
	// capture loop
	char key = 0;
int start = clock();
int pause;
double gap;
cout << "start time is:" << start << endl;
    while(key != 'q')
{
		// Get the image
		Image rawImage;
		Error error = camera.RetrieveBuffer( &rawImage );
		if ( error != PGRERROR_OK )
		{
			cout << "capture error" << endl;
			continue;
		}
		
		// convert to rgb
	    Image rgbImage;
        rawImage.Convert( FlyCapture2::PIXEL_FORMAT_BGR, &rgbImage );
       
		// convert to OpenCV Mat
		unsigned int rowBytes = (double)rgbImage.GetReceivedDataSize()/(double)rgbImage.GetRows();       
		cv::Mat image = cv::Mat(rgbImage.GetRows(), rgbImage.GetCols(), CV_8UC3, rgbImage.GetData(),rowBytes);
		//Create the gray image
		cv::Mat blurimage;
		cv::GaussianBlur(image,blurimage,cv::Size(5,5),0,0);
		//find the laser point by finding the brightest point in the image
   		cv::Mat gray_blurimage;
		cv::cvtColor(blurimage,gray_blurimage,6);
		cv::minMaxLoc(gray_blurimage,&minVal, &maxVal,&minLoc,&maxLoc);
		
		//Demonstrate the location of the laser point every 0.2 seconds, to reduce noise
		pause = clock();
	        gap = double(pause-start)/CLOCKS_PER_SEC*1000;
		if (gap < 200)
		   cout << "hasn't reached the gap" << endl;
		else
		{
		   cout << "the laser point is at:" << maxLoc.x <<","<<maxLoc.y<<endl; 	
		   start = pause;		
		}		
		//cout << "the laser point is at:" << maxLoc.x <<","<<maxLoc.y<<endl;
		cv::circle(image,maxLoc,radius,cv::Scalar(0,0,255),-1);
		cv::imshow("bright_spot", image);
		
		if(cv::waitKey(1) == 27)
			break;        
}
	
	error = camera.StopCapture();
    if ( error != PGRERROR_OK )
    {
        // This may fail when the camera was removed, so don't show 
        // an error message
    }  
	
	camera.Disconnect();
	
	return 0;

}
